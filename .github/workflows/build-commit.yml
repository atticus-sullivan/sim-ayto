# This is a basic workflow to help you get started with Actions

name: build-commit
concurrency: build-commit

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths:
      - 'rust/**'
      - '**.yaml'
    # paths-ignore:
    #   - 'img/**'
    #   - 'README.md'
    #   - 'ghcr/**'

  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/atticus-sullivan/custom-action:latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # see https://github.com/actions/checkout#usage for reference
      - uses: actions/checkout@v4
        with:
          ref: build
          fetch-depth: 0
      - run: |
          git fetch --no-tags origin main
          git checkout -b main origin/main
          git switch build

      # - name: Cache TeX Live packages
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       /usr/share/texlive
      #       /usr/share/texmf
      #       /var/lib/texmf
      #       /etc/texmf
      #     key: texlive-packages-${{ runner.os }}
      #     restore-keys: texlive-packages-

      # - name: apt stuff
      #   run: |
      #     sudo apt update
      #     sudo apt install -y graphviz
      #     if ! dpkg -l | grep -q texlive-latex-extra; then
      #           sudo apt install -y texlive texlive-latex-extra
      #     else
      #       echo "TeX Live packages are already installed."
      #     fi

      - name: Cache Rust cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Rust cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/index
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache Rust build
        uses: actions/cache@v3
        with:
          path: rust/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: setup rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: update on main
        run: |
          git config --global user.name "Updater"
          git config --global user.email "updater@example.com"
          git merge --no-ff main

      - name: restore modification times
        run: ./restore-ts.sh

      - name: Build rust
        run: |
          cd rust && cargo build --release
          # cd rust && RUSTFLAGS="-C target-cpu=skylake" cargo build --settings profile.release.codegen-units=1 --settings profile.release.lto=true --release

      - name: Build results files
        run: |
          make -f Makefile.action all

      # - name: ls
      #   run: ls -al ./*

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Built results
          branch: build
