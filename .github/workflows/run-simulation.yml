name: Run Simulation

on:
  push:
    branches:
      - main
    # paths:
    #   - 'rust/**'
    #   - 'data/**.yaml'

  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      sims: ${{ steps.detect_changes.outputs.sims }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: main
          fetch-depth: 0

      - name: Detect changes in inputfiles
        id: detect_changes
        run: |
          # Check if there's a push affecting the `rust/**` path or if it's a manual trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" || "$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep "rust/.*" || echo "")" == "" ]]; then
            # If `rust/**` is changed or it's a manual trigger, run all simulations
            sims="[\"$(find ./data -not -path '*/[@.]*' -type f -name '*.yaml' | sort -u | sed '{:q;N;s/\n/","/g;t q}')\"]"
          else
            # Detect which simulation inputs have changed
            sims="[\"$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep "data/[^.]*\.yaml" | sed "s/\(.*\)\.yaml$/\1/" | sort -u | sed '{:q;N;s/\n/","/g;t q}')\"]"
          fi
          echo "$sims"

          # Output the list of simulations that need to be run
          echo "sims=${sims}" >> $GITHUB_OUTPUT



  build:
    runs-on: ubuntu-latest
    outputs:
      ayto: ${{ steps.upload-artifact.outputs.ayto }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Rust cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Rust cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/index
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: setup rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Cache Rust build
        uses: actions/cache@v3
        with:
          path: rust/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('rust/**') }} }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Build rust
        run: |
          cd rust
          if [[ ! -f target/release/ayto ]] ; then
            cargo build --release
            # RUSTFLAGS="-C target-cpu=skylake" cargo build --settings profile.release.codegen-units=1 --settings profile.release.lto=true --release
          fi

      - name: Upload the executable
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ayto
          path: rust/target/release/ayto


  run-sim:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/atticus-sullivan/custom-action:latest
    needs:
      - define-matrix
      - build
    strategy:
      matrix:
        sim: ${{ fromJSON(needs.define-matrix.outputs.sims) }}
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          ref: build
          fetch-depth: 0

      - name: Setup working directory
        run: |
          git fetch --no-tags origin main
          git checkout -b main origin/main
          git switch build

      - name: update on main
        run: |
          git config --global user.name "Updater"
          git config --global user.email "updater@example.com"
          git merge --no-ff main

      - name: Download the built tool artifact
        uses: actions/download-artifact@v4
        with:
          name: ayto

      - name: Compute for ${{ matrix.sim }}
        run: |
          STEM="${{ matrix.sim }}"

          SAFENAME="$(echo "${STEM}" | tr "/" "_")"
          STEMD="$(dirname ${STEM})"

          STEM="${STEM%.yaml}"

          chmod +x ./ayto

          ./ayto sim -c -o "${STEM}" "${STEM}.yaml" > "${STEM}.col.out"

          # Use $GITHUB_ENV to share variables across steps
          echo "STEM=${STEM}" >> $GITHUB_ENV
          echo "STEMD=${STEMD}" >> $GITHUB_ENV
          echo "SAFENAME=${SAFENAME}" >> $GITHUB_ENV

      - name: Upload simulation results
        uses: actions/upload-artifact@v4
        with:
          name: sim-results-${{ env.SAFENAME }}
          path: |
            ${{ env.STEM }}.col.out
            ${{ env.STEM }}.md
            ${{ env.STEMD }}/statInfo.csv
            ${{ env.STEMD }}/statMB.csv
            ${{ env.STEMD }}/statMN.csv
            ./data/.gitkeep

  commit-results:
    runs-on: ubuntu-latest
    needs: run-sim
    steps:
      - uses: actions/checkout@v4
        with:
          ref: build

      - name: Download simulation results
        uses: actions/download-artifact@v4
        with:
          pattern: sim-results-*  # Download all the artifacts from the matrix jobs
          path: ./data
          merge-multiple: true

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Computation results
          branch: build

  generate-site:
    runs-on: ubuntu-latest
    needs: commit-results
    env:
      HUGO_VERSION: 0.128.0
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Install Dart Sass
        run: sudo snap install dart-sass

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: build
          submodules: recursive

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"

      - name: Install dependencies for building assets
        run: |
          sudo apt install graphviz python3 python3-pip
          pip install --break-system-packages ansitoimg

      - name: Build assets
        run: |
          for ele in ./data/*/*.col.out ; do
            n="${ele##*/}"
            n="${n%.col.out}"
            python3 generate_png.py data/de01/de01.col.out ./gh-pages/static/${n}/${n}
          done

      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          cd gh-pages
          hugo \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./gh-pages/public

  # Deployment job
  deploy-site:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: generate-site
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
